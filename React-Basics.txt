https://react-cn.github.io/react/downloads.html
https://reactjs.org/tutorial/tutorial.html

- React is javascript library not a framework
- It is fast and responsive
- It has composable components
- It is pluggable

JSX:
- It is plain javascript
- You can write html in javascript code

==============================================
const name = 'Josh Perez';
const element = <h1>Hello, {name}</h1>;

ReactDOM.render(
  element,
  document.getElementById('root')
);
==============================================

- JSX is an expression too
- This means that you can use JSX inside of if statements and for loops, assign it to variables 
accept it as arguments, and return it from functions:

==============================================
function getGreeting(user) {
  if (user) {
    return <h1>Hello, {formatName(user)}!</h1>;
  }
  return <h1>Hello, Stranger.</h1>;
}
==============================================

- Elements are the smallest building blocks of React apps.

Here you can write multiple elements in a single element...
==============================================
render: function(){
    
  return(
      
    <div>
        
      <p>Andriod - $114</p>
        
      <button onClick={this.buy}>Buy</button>
      
    </div>
    
  );

}
==============================================


Components and Props:
- Components let you split the UI into independent, reusable pieces,
and think about each piece in isolation.

- Conceptually, components are like JavaScript functions. 
- They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen.

Simple Function:
==============================================
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}
==============================================

ES6 Function:
==============================================
class Welcome extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}</h1>;
  }
}
==============================================

Composing Components:
- Components can refer to other components in their output. 
- This lets us use the same component abstraction for any level of detail. 
- A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.

State:
State is similar to props, but it is private and fully controlled by the component.

Handling Events:
- React events are named using camelCase, rather than lowercase.
- With JSX you pass a function as the event handler, rather than a string.

==============================================
<button onClick={activateLasers}>
  Activate Lasers
</button>
==============================================



